/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
// Include library
#include <stdint.h>
#include "stm32f401re_rcc.h"
#include "stm32f401re_gpio.h"

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

// Define logic level
#define GPIO_PIN_SET		1
#define GPIO_PIN_RESET		0
#define GPIO_PIN_LOW		0
#define GPIO_PIN_HIGH		1
// Define GPIO Pin
#define LED_GPIO_PORT		GPIOA
#define LED_GPIO_PIN		GPIO_Pin_5
#define LED_PIN5			5
#define LEDControl_SetClock RCC_AHB1Periph_GPIOA

#define BUTTON_GPIO_PORT	GPIOC
#define BUTTON_GPIO_PIN		GPIO_Pin_13
#define BUTTON_PIN13		13
#define BUTTONControl_SetClock RCC_AHB1Periph_GPIOC

// Function prototype
static void LED_Init(void);
static void BUTTON_Init(void);
static void LEDControl_SetStatus(GPIO_TypeDef* GPIOx, uint8_t GPIO_PIN, uint8_t Status);
static uint8_t ButtonRead_Status(GPIO_TypeDef* GPIOx, uint8_t GPIO_PIN);
static void Delay_ms(uint16_t time);

// Global var
uint8_t Status;
int main(void)
{
    /* Loop forever */
	LED_Init();
	BUTTON_Init();
	while(1)
	{
		Status = ButtonRead_Status(BUTTON_GPIO_PORT, BUTTON_PIN13);
		Delay_ms(100);
		LEDControl_SetStatus(LED_GPIO_PORT, LED_PIN5, Status);
	}
}

//Function
static void LED_Init(void)
{
	// Declare type variable GPIO struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable Clock GPIOA
	RCC_AHB1PeriphClockCmd(LEDControl_SetClock, ENABLE);

	// Choose LED Pin
	GPIO_InitStructure.GPIO_Pin = LED_GPIO_PIN;

	// Choose LED Pin as OUT
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;

	// Choose Pin Speed
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;

	// Select Type: Push-Pull or Open Drain
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;

	// Select Pin Status
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;

	// Initializes all parameters
	GPIO_Init(LED_GPIO_PORT, &GPIO_InitStructure);
}
static void BUTTON_Init(void)
{
	// Declare type variable GPIO struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable Clock GPIOA
	RCC_AHB1PeriphClockCmd(BUTTONControl_SetClock, ENABLE);

	// Choose LED Pin
	GPIO_InitStructure.GPIO_Pin = BUTTON_GPIO_PIN;

	// Choose LED Pin as OUT
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;

	// Choose Pin Speed
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;

	// Select Pin Status
GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;

	// Initializes all parameters
	GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStructure);
}
static void LEDControl_SetStatus(GPIO_TypeDef* GPIOx, uint8_t GPIO_PIN, uint8_t Status)
{
	// Set bit in BSRR registers
	if(Status == GPIO_PIN_SET)
	{
		GPIOx->BSRRL |= 1 << GPIO_PIN;
	}
	// Reset bit in BSRR registers
	if(Status == GPIO_PIN_RESET)
	{
		GPIOx->BSRRH |= 1 << GPIO_PIN;
	}
}
static uint8_t ButtonRead_Status(GPIO_TypeDef* GPIOx, uint8_t GPIO_PIN)
{
	uint32_t Read_Pin;
	// Read bit in IDR registers
	Read_Pin = (GPIOx->IDR) >> GPIO_PIN;
	Read_Pin = Read_Pin & 0x01;

	return Read_Pin;
}
static void Delay_ms(uint16_t time)
{
	for(int i = 0; i < time; i++)
	{
		for(int j = 0; j < 123; j++)
		{
			// Chờ vòng for chạy xong
		}
	}
}
